{"version":3,"sources":["components/menu/menu.js","components/pinPad/pinPad.js","components/operate/operate.js","components/cancel/cancel.js","components/customAmount/customAmount.js","pages/atm/atm.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["Menu","selectOperation","val","props","changeOperation","className","onClick","Component","connect","state","operation","balance","dispatch","type","PinPad","handleClick","deleteCode","deleteDigit","checkCode","changeCode","this","length","digit","Operate","changeMenu","menu","changeText","changeBalance","amount","deleteCustomAmount","fundsInfo","toFixed","text","Cancel","CustomAmount","changeAmount","customAmount","console","log","parseInt","deleteCustomAmountLastDigit","Atm","authenticated","App","Boolean","window","location","hostname","match","initState","rootReducer","action","newOperation","newDigit","concat","slice","newBalance","newFundsInfo","newAmount","newCustomAmount","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72e68bb9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './menu.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Menu extends Component {\r\n\r\n    // selectOperation will change the screen depending on user choice\r\n    selectOperation = (val) => {\r\n        this.props.changeOperation(val)\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <h1>Select operation</h1>\r\n                <div className=\"select-operation\">\r\n                    <button onClick={() => this.selectOperation(1)}>Withdraw</button>\r\n                    <button onClick={() => this.selectOperation(2)}>Deposit</button>\r\n                </div>\r\n                <div className=\"cancel-operation\">\r\n                    <button onClick={() => this.selectOperation(3)}>Cancel operation</button>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        operation: state.operation,\r\n        balance: state.balance\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeOperation: (operation) => { dispatch({type: \"CHANGE_OPERATION\", operation}) } \r\n    }\r\n}\r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps )(Menu);\r\n","import React, { Component } from 'react';\r\nimport './pinPad.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nclass PinPad extends Component {\r\n\r\n    // handleClick is responsible for adding, removing and clearing PIN digits, as well as accepting entered PIN to validate it\r\n    handleClick = (val) => {\r\n        if (val === \"delete\"){\r\n            this.props.deleteCode()\r\n        } else if (val === \"back\"){\r\n            this.props.deleteDigit()\r\n        } else if (val === \"accept\"){\r\n            this.props.checkCode()\r\n        } else if (!this.props.val[0]) {\r\n            this.props.changeCode(val)\r\n        } else if (!this.props.val[1]) {\r\n            this.props.changeCode(val)\r\n        } else if (!this.props.val[2]) {\r\n            this.props.changeCode(val)\r\n        } else if (!this.props.val[3]) {\r\n            this.props.changeCode(val)\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"screen\">\r\n                    <h2>{this.props.val.length<1 ? \"Enter PIN\" : this.props.val}</h2>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"7\")}>7</button>\r\n                        <button onClick={() => this.handleClick(\"8\")}>8</button>\r\n                        <button onClick={() => this.handleClick(\"9\")}>9</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"4\")}>4</button>\r\n                        <button onClick={() => this.handleClick(\"5\")}>5</button>\r\n                        <button onClick={() => this.handleClick(\"6\")}>6</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"1\")}>1</button>\r\n                        <button onClick={() => this.handleClick(\"2\")}>2</button>\r\n                        <button onClick={() => this.handleClick(\"3\")}>3</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"0\")}>0</button>\r\n                        <button onClick={() => this.handleClick(\"back\")} className = \"back-button\">Correct</button>\r\n                        <button onClick={() => this.handleClick(\"delete\")} className = \"delete-button\">Cancel</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button className = \"accept-button\" onClick={() => this.handleClick(\"accept\")}>Accept</button>\r\n                    </div>\r\n                </div>\r\n              \r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        val: state.val,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        changeCode: (digit) => {\r\n            dispatch({\r\n                type: 'CHANGE_DIGIT',\r\n                digit\r\n            })\r\n        },\r\n        deleteCode: () => {\r\n            dispatch ({\r\n                type: 'DELETE_PINCODE'\r\n            })\r\n        },\r\n        deleteDigit: () => {\r\n            dispatch ({\r\n                type: 'DELETE_DIGIT'\r\n            })\r\n        },\r\n        checkCode: () => {\r\n            dispatch ({\r\n                type: 'CHECK_CODE'\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PinPad);","import React, { Component } from 'react';\r\nimport './operate.scss';\r\nimport { connect } from 'react-redux';\r\n\r\n// this component can be use bouth to withdraw and deposit money\r\n\r\nclass Operate extends Component {\r\n\r\n    // changeMenu function lets you go back to main menu\r\n    changeMenu = (menu) => {\r\n        this.props.changeOperation(menu)\r\n        this.props.changeText(\"\")\r\n    }\r\n\r\n    // changeBalance lets you add or deduct money to and from the account.\r\n    // if you want to withdraw more money than there is currently on your account this function will prevent you from doing so by displaying proper alert on the screen.\r\n    // it also display message with withdrawed/deposited amount\r\n    changeBalance = (amount) => {\r\n        if (this.props.operation === 1 && this.props.balance < (amount*100)){\r\n            this.props.changeText(\"Insufficient funds\")\r\n        } else if (this.props.operation === 1 && amount){\r\n            this.props.changeBalance(-amount*100)\r\n            this.props.changeText(\"Deducted \"+ amount + \" PLN\")\r\n        } else if (this.props.operation === 2) {\r\n            this.props.changeBalance(amount*100)\r\n            this.props.changeText(\"Added \"+ amount + \" PLN\")\r\n        }\r\n    }\r\n\r\n    // this one deletes custom amount\r\n    deleteCustomAmount = () => {\r\n        this.props.deleteCustomAmount()\r\n    }\r\n    \r\n    render() { \r\n        return ( \r\n            <div className=\"operation\">\r\n                <div className=\"operation-box\">\r\n                        <div className=\"operation-type\">\r\n                            <h2>{this.props.operation === 1 ? \"Withdraw\" : this.props.operation === 2 ? \"Deposit\" : \"\"}</h2>\r\n                        </div>\r\n                        <div className=\"show-balance\">\r\n                            <h2>Balance</h2>\r\n                        </div>\r\n                </div>\r\n                <div className=\"screen-box\">\r\n                        <div className=\"funds-text\">\r\n                           <p>{this.props.fundsInfo}</p> \r\n                        </div>\r\n                        <div className=\"balance\">\r\n                            <p>{(this.props.balance/100).toFixed(2)} PLN</p>\r\n                        </div>\r\n                </div>\r\n                <div className=\"amount-select\">\r\n                    <div className=\"amount-row\">\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(20)}>\r\n                        20\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(50)}>\r\n                        50\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(100)}>\r\n                        100\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"amount-row\">\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(150)}>\r\n                        150\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(200)}>\r\n                        200\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(300)}>\r\n                        300\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"amount-row\">\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(400)}>\r\n                        400\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => this.changeBalance(500)}>\r\n                        500\r\n                        </button>\r\n                        <button className=\"amount\" onClick={() => {this.changeMenu(this.props.operation+3); this.deleteCustomAmount()}} >\r\n                        Other \r\n                        </button>\r\n                    </div>\r\n                </div>\r\n                <button onClick={() => this.changeMenu(0)}>\r\n                    Back\r\n                </button>\r\n            </div>\r\n            \r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        operation: state.operation,\r\n        balance: state.balance,\r\n        fundsInfo: state.fundsInfo\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeOperation: (operation) => { dispatch({type: \"CHANGE_OPERATION\", operation}) }, \r\n        changeBalance: (amount) => { dispatch({type: \"CHANGE_BALANCE\", amount}) },\r\n        changeText: (text) => {dispatch ({ type: \"FUNDS_INFO\", text})},\r\n        deleteCustomAmount: () => {dispatch ({ type: 'DELETE_CUSTOM_AMOUNT'})}\r\n    }\r\n}\r\n \r\n \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Operate);","import React, { Component } from 'react';\r\n\r\nclass Cancel extends Component {\r\n    render() { \r\n        return ( \r\n            <div className = \"cancel\">\r\n                <h2>Thank you for choosing our bank</h2>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Cancel;","import React, { Component } from 'react';\r\nimport './customAmount.scss';\r\nimport { connect } from 'react-redux';\r\n\r\nclass CustomAmount extends Component {\r\n\r\n    // handleClick sends the pressed digit to be added to custom amount to withdraw/deposit\r\n    handleClick = (val) => {\r\n            this.props.changeAmount(val) \r\n    }\r\n\r\n    // changeMenu changes displayed component from the one to enter custom amount to either withdraw or deposit one\r\n    // it also handles displaying messages on the screen of the withdraw/deposit component.\r\n    changeMenu = (menu) => {\r\n        this.props.changeOperation(menu)\r\n        if (this.props.customAmount%20 !== 0 && this.props.customAmount%50 !== 0) {\r\n            this.props.changeText(\"Amount must be a multiple of 20 or 50\")\r\n        } else if ((this.props.customAmount*100 > this.props.balance) && this.props.operation === 4){\r\n            this.props.changeText(\"Insufficient funds\")\r\n        } else if (this.props.operation === 4) {\r\n            this.props.changeText(\"Deducted \" + this.props.customAmount + \" PLN\")\r\n        } else if (this.props.operation === 5) {\r\n            this.props.changeText(\"Added \" + this.props.customAmount + \" PLN\")\r\n        }\r\n    }\r\n    \r\n    // changeBalance is changing the amount that is in user account\r\n    // it also prevents user from withdrawing more money than he/she has and it prevents of withdrawing and depositing amounts that are not multiply by 20 or 50\r\n    changeBalance = (customAmount) => {\r\n        console.log(this.props.customAmount + ' ' +this.props.balance)\r\n        if (this.props.operation === 4 && parseInt(this.props.customAmount*100) > this.props.balance){\r\n            console.log('Amount must be a multiple of 20 or 50')\r\n        } else if (this.props.customAmount%20 !== 0 && this.props.customAmount%50 !== 0) {\r\n            console.log('')\r\n        } else if (this.props.operation === 4){\r\n            this.props.changeBalance(-customAmount*100)\r\n        } else if (this.props.operation === 5){\r\n            this.props.changeBalance(customAmount*100)\r\n        }\r\n    }\r\n    // deleteCustomAmount cleans the custom amount that user wanted to withdraw/deposit\r\n    deleteCustomAmount = () => {\r\n        this.props.deleteCustomAmount()\r\n    }\r\n\r\n    //deleteCustomAmountLastDigit lets user delete last entered digit so that he/she can correct the custom amount to withdraw or deposit\r\n    deleteCustomAmountLastDigit = () => {\r\n        this.props.deleteCustomAmountLastDigit()\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div>\r\n                <div className=\"custom-amount\">\r\n                <h2>Please enter amount</h2>\r\n                <p>{parseInt(this.props.customAmount)}</p>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"7\")}>7</button>\r\n                        <button onClick={() => this.handleClick(\"8\")}>8</button>\r\n                        <button onClick={() => this.handleClick(\"9\")}>9</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"4\")}>4</button>\r\n                        <button onClick={() => this.handleClick(\"5\")}>5</button>\r\n                        <button onClick={() => this.handleClick(\"6\")}>6</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"1\")}>1</button>\r\n                        <button onClick={() => this.handleClick(\"2\")}>2</button>\r\n                        <button onClick={() => this.handleClick(\"3\")}>3</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        <button onClick={() => this.handleClick(\"0\")}>0</button>\r\n                        <button onClick={() => this.deleteCustomAmountLastDigit()} className = \"back-button\">Correct</button>\r\n                        <button onClick={() => this.deleteCustomAmount()} className = \"delete-button\">Cancel</button>\r\n                    </div>\r\n                    <div className=\"buttons-row\">\r\n                        {/* depends if user is depositing or withdrawing money the accept button will transfer him/her to proper component after accepting the custom amount*/}\r\n                        <button className = \"accept-button\" onClick={() => {this.changeBalance(this.props.customAmount);this.changeMenu(this.props.operation-3)}\r\n                        }>Accept</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customAmount: state.customAmount,\r\n        operation: state.operation,\r\n        balance: state.balance\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeAmount: (val) => { dispatch({ type: \"ADD_CUSTOM_AMOUNT\", val}) },\r\n        changeBalance: (amount) => { dispatch({type: \"CHANGE_BALANCE\", amount}) },\r\n        changeOperation: (operation) => { dispatch({type: \"CHANGE_OPERATION\", operation}) },\r\n        deleteCustomAmount: () => { dispatch ({ type: 'DELETE_CUSTOM_AMOUNT'})},\r\n        deleteCustomAmountLastDigit: () => { dispatch ({ type: 'DELETE_CUSTOM_AMOUNT_LAST_DIGIT'})},\r\n        changeText: (text) => {dispatch ({ type: \"FUNDS_INFO\", text})}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomAmount);","import React, { Component } from 'react';\r\nimport Menu from '../../components/menu/menu';\r\nimport PinPad from '../../components/pinPad/pinPad';\r\nimport './atm.scss';\r\nimport { connect } from 'react-redux';\r\nimport Operate from '../../components/operate/operate';\r\nimport Cancel from '../../components/cancel/cancel';\r\nimport CustomAmount from '../../components/customAmount/customAmount';\r\n\r\nclass Atm extends Component {\r\n    render() { \r\n        return ( \r\n            <div className=\"atm\">\r\n                <div className=\"atm-menu\">\r\n                {/* My custom routing:\r\n                if authenticated bool is false then you have to enter user PIN on the keyboard. As login is not required in this exercise any 4 digits will pass as PIN\r\n                Components are switching with this.props.operation\r\n                0 - Main menu (withdraw, deposit, cancel operatio)\r\n                1 - withdraw money\r\n                2 - deposit money\r\n                3 - cancel operation and \"log out\"\r\n                4 - withdraw custom amount of money\r\n                5 - deposit custom amount of money */}\r\n                    {!this.props.authenticated ? <PinPad /> :\r\n                    this.props.operation === 0 ? <Menu /> : \r\n                    this.props.operation === 3 ? <Cancel/> : \r\n                    this.props.operation === 4 ? <CustomAmount /> : \r\n                    this.props.operation === 5 ? <CustomAmount /> :\r\n                    <Operate />}  \r\n                    \r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        operation: state.operation,\r\n        authenticated: state.authenticated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Atm);","import React from 'react';\nimport './App.css';\nimport Atm from './pages/atm/atm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Atm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    val: [],\r\n    balance: 15000,\r\n    amount: 0,\r\n    operation: 0,\r\n    authenticated: false,\r\n    fundsInfo: \"Please select amount\",\r\n    customAmount: 0,\r\n}\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    if (action.type === 'CHANGE_OPERATION'){\r\n        let newOperation = action.operation;\r\n        return {\r\n            ...state,\r\n            operation: newOperation\r\n        }\r\n    }\r\n    if (action.type === 'CHANGE_DIGIT'){\r\n        let newDigit = action.digit;\r\n        return {\r\n            ...state,\r\n            val: state.val.concat(newDigit)\r\n        }\r\n    }\r\n    if (action.type === 'DELETE_PINCODE'){\r\n        let deleteCode = []\r\n        return {\r\n            ...state,\r\n            val: deleteCode\r\n        }\r\n    }\r\n    if (action.type === 'DELETE_DIGIT'){\r\n        return {\r\n            ...state,\r\n            val: state.val.slice(0, state.val.length-1)\r\n        }\r\n    }\r\n    if (action.type === 'CHECK_CODE'){\r\n        //this one could validate if the entered PIN and user id is correct but since it is not a requirement in this excercise it only checkes if entered PIN has 4 digits\r\n        if (state.val.length > 3){\r\n            return {\r\n                ...state,\r\n                authenticated: true\r\n            }\r\n        }\r\n    }\r\n    if (action.type === 'CHANGE_BALANCE'){\r\n        let newBalance = state.balance + action.amount\r\n        return {\r\n            ...state,\r\n            balance: newBalance\r\n        }\r\n    }\r\n    if (action.type === 'FUNDS_INFO'){\r\n        let newFundsInfo = action.text\r\n        return {\r\n            ...state,\r\n            fundsInfo: newFundsInfo\r\n        }\r\n    }\r\n    if (action.type === 'ADD_CUSTOM_AMOUNT'){\r\n        let newAmount = state.customAmount + action.val\r\n        if(newAmount[0] === \"0\") newAmount = newAmount.slice(1, newAmount.length)\r\n        return {\r\n            ...state,\r\n            customAmount: newAmount\r\n        }\r\n    }\r\n    if (action.type === 'DELETE_CUSTOM_AMOUNT') {\r\n        return {\r\n            ...state,\r\n            customAmount: 0\r\n        }\r\n    }\r\n    if (action.type === 'DELETE_CUSTOM_AMOUNT_LAST_DIGIT') {\r\n        let newCustomAmount = state.customAmount\r\n        if (newCustomAmount !== 0 && newCustomAmount.length === 1) {\r\n            newCustomAmount = 0\r\n        } else if (newCustomAmount.length > 1){\r\n            newCustomAmount = newCustomAmount.slice(0,newCustomAmount.length-1)\r\n        }\r\n        return {\r\n            ...state,\r\n            customAmount: newCustomAmount\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers/rootReducer';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}